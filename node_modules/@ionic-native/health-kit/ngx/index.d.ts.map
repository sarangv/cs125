{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nexport interface HealthKitOptions {\n    /**\n     * HKWorkoutActivityType constant\n     * Read more here: https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HKWorkout_Class/#//apple_ref/c/tdef/HKWorkoutActivityType\n     */\n    activityType?: string;\n    /**\n     * 'hour', 'week', 'year' or 'day', default 'day'\n     */\n    aggregation?: string;\n    amount?: number;\n    /**\n     * specifies if the data returned by querySampleType() should be sorted by\n     * end date in ascending order, default is false\n     */\n    ascending?: boolean;\n    correlationType?: string;\n    date?: any;\n    distance?: number;\n    /**\n     * probably useful with the former param\n     */\n    distanceUnit?: string;\n    /**\n     * in seconds, optional, use either this or endDate\n     */\n    duration?: number;\n    endDate?: any;\n    energy?: number;\n    /**\n     * J|cal|kcal\n     */\n    energyUnit?: string;\n    extraData?: any;\n    /**\n     * limits the maximum number of records returned by querySampleType()\n     */\n    limit?: number;\n    metadata?: any;\n    quantityType?: string;\n    type?: string;\n    readTypes?: any;\n    requestWritePermission?: boolean;\n    samples?: any;\n    sampleType?: string;\n    startDate?: any;\n    /**\n     * m|cm|mm|in|ft\n     */\n    unit?: string;\n    requestReadPermission?: boolean;\n    writeTypes?: any;\n}\n/**\n * @name Health Kit\n * @description\n * The HealthKit plugin allows you to read data from and write data to the iOS 8+ HealthKit framework.\n * Any data saved shows up in the iOS Health app and is available for other iOS apps.\n *\n * @usage\n * ```typescript\n * import { HealthKit } from '@ionic-native/health-kit/ngx';\n *\n *\n * constructor(private healthKit: HealthKit) { }\n *\n * ...\n * ```\n *\n * @interfaces\n * HealthKitOptions\n */\nexport declare class HealthKit extends IonicNativePlugin {\n    /**\n     * Check if HealthKit is supported (iOS8+, not on iPad)\n     * @returns {Promise<any>}\n     */\n    available(): Promise<any>;\n    /**\n     * Pass in a type and get back on of undetermined | denied | authorized\n     * @param options {HealthKitOptions}\n     * @returns {Promise<any>}\n     */\n    checkAuthStatus(options: HealthKitOptions): Promise<any>;\n    /**\n     * Ask some or all permissions up front\n     * @param options {HealthKitOptions}\n     * @returns {Promise<any>}\n     */\n    requestAuthorization(options: HealthKitOptions): Promise<any>;\n    /**\n     * Formatted as yyyy-MM-dd\n     * @returns {Promise<any>}\n     */\n    readDateOfBirth(): Promise<any>;\n    /**\n     * Output = male|female|other|unknown\n     * @returns {Promise<any>}\n     */\n    readGender(): Promise<any>;\n    /**\n     * Output = A+|A-|B+|B-|AB+|AB-|O+|O-|unknown\n     * @returns {Promise<any>}\n     */\n    readBloodType(): Promise<any>;\n    /**\n     * Output = I|II|III|IV|V|VI|unknown\n     * @returns {Promise<any>}\n     */\n    readFitzpatrickSkinType(): Promise<any>;\n    /**\n     * Pass in unit (g=gram, kg=kilogram, oz=ounce, lb=pound, st=stone) and amount\n     * @param options {HealthKitOptions}\n     * @returns {Promise<any>}\n     */\n    saveWeight(options: HealthKitOptions): Promise<any>;\n    /**\n     * Pass in unit (g=gram, kg=kilogram, oz=ounce, lb=pound, st=stone)\n     * @param options {HealthKitOptions}\n     * @returns {Promise<any>}\n     */\n    readWeight(options: HealthKitOptions): Promise<any>;\n    /**\n     * Pass in unit (mm=millimeter, cm=centimeter, m=meter, in=inch, ft=foot) and amount\n     * @param options {HealthKitOptions}\n     * @returns {Promise<any>}\n     */\n    saveHeight(options: HealthKitOptions): Promise<any>;\n    /**\n     * Pass in unit (mm=millimeter, cm=centimeter, m=meter, in=inch, ft=foot)\n     * @param options {HealthKitOptions}\n     * @returns {Promise<any>}\n     */\n    readHeight(options: HealthKitOptions): Promise<any>;\n    /**\n     * no params yet, so this will return all workouts ever of any type\n     * @returns {Promise<any>}\n     */\n    findWorkouts(): Promise<any>;\n    /**\n     *\n     * @param options {HealthKitOptions}\n     * @returns {Promise<any>}\n     */\n    saveWorkout(options: HealthKitOptions): Promise<any>;\n    /**\n     *\n     * @param options {HealthKitOptions}\n     * @returns {Promise<any>}\n     */\n    querySampleType(options: HealthKitOptions): Promise<any>;\n    /**\n     *\n     * @param options {HealthKitOptions}\n     * @returns {Promise<any>}\n     */\n    querySampleTypeAggregated(options: HealthKitOptions): Promise<any>;\n    /**\n     *\n     * @param options {HealthKitOptions}\n     * @returns {Promise<any>}\n     */\n    deleteSamples(options: HealthKitOptions): Promise<any>;\n    /**\n     *\n     * @param options {HealthKitOptions}\n     * @returns {Promise<any>}\n     */\n    monitorSampleType(options: HealthKitOptions): Promise<any>;\n    /**\n     *\n     * @param options {HealthKitOptions}\n     * @returns {Promise<any>}\n     */\n    sumQuantityType(options: HealthKitOptions): Promise<any>;\n    /**\n     *\n     * @param options {HealthKitOptions}\n     * @returns {Promise<any>}\n     */\n    saveQuantitySample(options: HealthKitOptions): Promise<any>;\n    /**\n     *\n     * @param options {HealthKitOptions}\n     * @returns {Promise<any>}\n     */\n    saveCorrelation(options: HealthKitOptions): Promise<any>;\n    /**\n     *\n     * @param options {HealthKitOptions}\n     * @returns {Promise<any>}\n     */\n    queryCorrelationType(options: HealthKitOptions): Promise<any>;\n}\n"]}