{"version":3,"sources":["webpack:///src/app/foodlog/foodlog.page.scss","webpack:///src/app/foodlog/foodlog-routing.module.ts","webpack:///src/app/foodlog/foodlog.page.ts","webpack:///src/app/foodlog/foodlog.module.ts","webpack:///src/app/foodlog/foodlog.page.html"],"names":["routes","path","component","FoodlogPageRoutingModule","imports","forChild","exports","FoodlogPage","healthKit","plt","userService","formBuilder","navCtrl","errorMessages","name","type","message","time","calories_i","dataFromService","foodForm","group","required","maxLength","pattern","available","console","log","get","navigateBack","value","dataToSend","food_name","Savefood","subscribe","dataReturnFromService","JSON","stringify","selector","template","FoodlogPageModule","declarations"],"mappings":"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","file":"foodlog-foodlog-module-es5.js","sourcesContent":["export default \".error-message {\\n  color: var(--ion-color-danger);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2Zvb2Rsb2cucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksOEJBQUE7QUFDSiIsImZpbGUiOiJmb29kbG9nLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5lcnJvci1tZXNzYWdlIHtcbiAgICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLWRhbmdlcik7XG59Il19 */\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { FoodlogPage } from './foodlog.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: FoodlogPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class FoodlogPageRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { HealthKit, HealthKitOptions } from '@ionic-native/health-kit/ngx';\nimport {UserService} from '../api/user.service';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport { NavController, Platform } from '@ionic/angular';\n\n@Component({\n  selector: 'app-foodlog',\n  templateUrl: './foodlog.page.html',\n  styleUrls: ['./foodlog.page.scss'],\n})\n  export class FoodlogPage implements OnInit {\n    get name() {\n      return this.foodForm.get(\"name\");\n    }\n    get time() {\n      return this.foodForm.get(\"time\");\n    }\n    get calories_i() {\n      return this.foodForm.get('calories_i');\n    }\n  \n    public errorMessages = {\n      name: [\n        { type: 'required', message: 'Food name is required' },\n        { type: 'maxlength', message: 'Food name cant be longer than 100 characters' }\n      ],\n      time: [\n        { type: 'required', message: 'Time is required' },\n        { type: 'pattern', message: 'Please enter a valid time' }\n      ],\n      calories_i: [\n        { type: 'required', message: 'Caloric intake is required' },\n        { type: 'pattern',message: 'Please enter a calorie count' } \n      ]\n    };\n  \n    dataFromService:any=\"\";\n    foodForm = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.maxLength(100)]],\n      time: [\n        '',\n        [\n          Validators.required,\n          Validators.pattern('^((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))$')\n        ]\n      ],\n      calories_i: [\n        '',\n        [\n          Validators.required,\n          Validators.pattern('^[0-9]{1,4}$')\n        ]\n      ]\n    });\n  \n    //ionic generate page x\n   \n    constructor(private healthKit: HealthKit, private plt: Platform, public userService:UserService, private formBuilder: FormBuilder, private navCtrl : NavController) {\n      if (this.healthKit.available()) { console.log(\"Healthkit available\"); } \n    }\n  \n    dismissRegistration() {\n      this.navCtrl.navigateBack('/tabs/tab2');\n    }\n    \n    public submit() {\n      console.log(this.foodForm.value);\n    }\n    \n    SaveFood()\n    {\n      let name = this.foodForm.get(\"name\").value;\n      let time = this.foodForm.get(\"time\").value;\n      let calories_i = this.foodForm.get(\"calories_i\").value;\n      var dataToSend = {\n        food_name: name, \n        time: time, \n        calories_i: calories_i};\n      this.userService.Savefood(dataToSend).subscribe(\n        (dataReturnFromService)=>{\n          this.dataFromService = JSON.stringify(dataReturnFromService);\n          console.log(dataReturnFromService);\n          this.navCtrl.navigateBack('/tabs/tab2');\n        })\n  \n      //this.navCtrl.navigateForward('/tabs');\n    }\n\n    ngOnInit() {\n    }\n  \n  }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\nimport {ReactiveFormsModule} from '@angular/forms';\n\nimport { FoodlogPageRoutingModule } from './foodlog-routing.module';\n\nimport { FoodlogPage } from './foodlog.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    FoodlogPageRoutingModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [FoodlogPage]\n})\nexport class FoodlogPageModule {}\n","export default \"<ion-header [translucent]=\\\"true\\\">\\n  <ion-toolbar>\\n    <ion-button color=\\\"light\\\" (click)=\\\"dismissRegistration()\\\">Back</ion-button>\\n    <ion-title>\\n      Food Log\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <form [formGroup]=\\\"foodForm\\\" (ngSubmit)=\\\"submit()\\\">\\n    <ion-list>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Food Name</ion-label>\\n        <ion-input autocapitalize inputmode=\\\"text\\\" formControlName=\\\"name\\\"></ion-input>\\n      </ion-item>\\n      <div *ngFor=\\\"let error of errorMessages.name\\\">\\n        <ng-container *ngIf=\\\"name.hasError(error.type) && (name.dirty || name.touched)\\\">\\n          <small class=\\\"error-message\\\">{{error.message}}</small>\\n        </ng-container>\\n      </div>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Time Consumed </ion-label>\\n        <ion-input inputmode=\\\"text\\\" formControlName=\\\"time\\\"></ion-input>\\n      </ion-item>\\n      <div *ngFor=\\\"let error of errorMessages.time\\\">\\n        <ng-container *ngIf=\\\"time.hasError(error.type) && (time.dirty || time.touched)\\\">\\n          <small class=\\\"error-message\\\">{{error.message}}</small>\\n        </ng-container>\\n      </div>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Calories</ion-label>\\n        <ion-input formControlName=\\\"calories_i\\\"></ion-input>\\n      </ion-item>\\n      <div *ngFor=\\\"let error of errorMessages.calories_i\\\">\\n        <ng-container *ngIf=\\\"calories_i.hasError(error.type) && (calories_i.dirty || calories_i.touched)\\\">\\n          <small class=\\\"error-message\\\">{{error.message}}</small>\\n        </ng-container>\\n      </div>\\n    </ion-list>\\n    <ion-button [disabled]=\\\"!foodForm.valid\\\" (click)=\\\"SaveFood()\\\" type=\\\"submit\\\" expand=\\\"block\\\">Submit <ion-icon slot=\\\"end\\\"\\n        name=\\\"create\\\">\\n      </ion-icon>\\n    </ion-button>\\n  </form>\\n</ion-content>\";"]}