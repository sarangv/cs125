{"version":3,"sources":["webpack:///src/app/activitylog/activitylog.page.scss","webpack:///src/app/activitylog/activitylog-routing.module.ts","webpack:///src/app/activitylog/activitylog.page.ts","webpack:///src/app/activitylog/activitylog.module.ts","webpack:///src/app/activitylog/activitylog.page.html"],"names":["routes","path","component","ActivitylogPageRoutingModule","imports","forChild","exports","ActivitylogPage","healthKit","plt","userService","formBuilder","navCtrl","errorMessages","name","type","message","start_time","end_time","intensity","calories_b","dataFromService","activityForm","group","required","maxLength","pattern","available","console","log","get","navigateBack","value","dataToSend","activity_name","Saveactivity","subscribe","dataReturnFromService","JSON","stringify","navigateForward","selector","template","ActivitylogPageModule","declarations"],"mappings":"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","file":"activitylog-activitylog-module-es5.js","sourcesContent":["export default \".error-message {\\n  color: var(--ion-color-danger);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FjdGl2aXR5bG9nLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLDhCQUFBO0FBQ0oiLCJmaWxlIjoiYWN0aXZpdHlsb2cucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmVycm9yLW1lc3NhZ2Uge1xuICAgIGNvbG9yOiB2YXIoLS1pb24tY29sb3ItZGFuZ2VyKTtcbn0iXX0= */\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ActivitylogPage } from './activitylog.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ActivitylogPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ActivitylogPageRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { HealthKit, HealthKitOptions } from '@ionic-native/health-kit/ngx';\nimport { UserService } from '../api/user.service';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { NavController, Platform } from '@ionic/angular';\n\n@Component({\n  selector: 'app-activitylog',\n  templateUrl: './activitylog.page.html',\n  styleUrls: ['./activitylog.page.scss'],\n})\n  export class ActivitylogPage implements OnInit {\n    get name() {\n      return this.activityForm.get(\"name\");\n    }\n    get start_time() {\n      return this.activityForm.get(\"start_time\");\n    }\n    get end_time() {\n      return this.activityForm.get(\"end_time\");\n    }\n    get intensity() {\n      return this.activityForm.get('intensity');\n    }\n    get calories_b() {\n      return this.activityForm.get('calories_b');\n    }\n  \n    public errorMessages = {\n      name: [\n        { type: 'required', message: 'Activity name is required' },\n        { type: 'maxlength', message: 'Activity name cant be longer than 100 characters' }\n      ],\n      start_time: [\n        { type: 'required', message: 'Start time is required' },\n        { type: 'pattern', message: 'Please enter a valid Start time' }\n      ],\n      end_time: [\n        { type: 'required', message: 'End time is required' },\n        { type: 'pattern', message: 'Please enter a valid End time' }\n      ],\n      intensity: [\n        { type: 'required', message: 'Intensity is required' },\n        { type: 'pattern', message: 'Please enter a valid intensity' }\n      ],\n      calories_b: [\n        { type: 'required', message: 'Calories burned is required' },\n        { type: 'pattern',message: 'Please enter a calorie count' } \n      ]\n    };\n  \n    dataFromService:any=\"\";\n    activityForm = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.maxLength(100)]],\n      start_time: [\n        '',\n        [\n          Validators.required,\n          Validators.pattern('^((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))$')\n        ]\n      ],\n      end_time: [\n        '',\n        [\n          Validators.required,\n          Validators.pattern('^((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))$')\n        ]\n      ],\n      intensity: [\n        '',\n        [\n          Validators.required,\n          Validators.pattern('^[1-5]$')\n        ]\n      ],\n      calories_b: [\n        '',\n        [\n          Validators.required,\n          Validators.pattern('^[0-9]{1,4}$')\n        ]\n      ]\n    });\n   \n    constructor(private healthKit: HealthKit, private plt: Platform, public userService:UserService, private formBuilder: FormBuilder, private navCtrl : NavController) {\n      if (this.healthKit.available()) { console.log(\"Healthkit available\"); } \n    }\n\n    ngOnInit() {\n    }\n  \n    dismissRegistration() {\n      this.navCtrl.navigateBack('/tabs/tab2');\n    }\n    \n    public submit() {\n      console.log(this.activityForm.value);\n    }\n    \n    SaveActivity()\n    {\n      let name = this.activityForm.get(\"name\").value;\n      let start_time = this.activityForm.get(\"start_time\").value;\n      let end_time = this.activityForm.get(\"end_time\").value;\n      let intensity = this.activityForm.get(\"intensity\").value;\n      let calories_b = this.activityForm.get(\"calories_b\").value;\n      var dataToSend = {\n        activity_name: name, \n        start_time: start_time, \n        end_time: end_time, \n        intensity: intensity,\n        calories_b: calories_b};\n      this.userService.Saveactivity(dataToSend).subscribe(\n        (dataReturnFromService)=>{\n          this.dataFromService = JSON.stringify(dataReturnFromService);\n          console.log(dataReturnFromService);\n          this.navCtrl.navigateForward('/tabs/tab2');\n        })\n  \n    }\n  \n  }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\n\nimport { ActivitylogPageRoutingModule } from './activitylog-routing.module';\n\nimport { ActivitylogPage } from './activitylog.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ActivitylogPageRoutingModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [ActivitylogPage]\n})\nexport class ActivitylogPageModule {}\n","export default \"<ion-header [translucent]=\\\"true\\\">\\n  <ion-toolbar>\\n    <ion-button color=\\\"light\\\" (click)=\\\"dismissRegistration()\\\">Back</ion-button>\\n    <ion-title>\\n      Activity Log\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <form [formGroup]=\\\"activityForm\\\" (ngSubmit)=\\\"submit()\\\">\\n    <ion-list>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Activity Name</ion-label>\\n        <ion-input autocapitalize inputmode=\\\"text\\\" formControlName=\\\"name\\\"></ion-input>\\n      </ion-item>\\n      <div *ngFor=\\\"let error of errorMessages.name\\\">\\n        <ng-container *ngIf=\\\"name.hasError(error.type) && (name.dirty || name.touched)\\\">\\n          <small class=\\\"error-message\\\">{{error.message}}</small>\\n        </ng-container>\\n      </div>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Start Time</ion-label>\\n        <ion-input inputmode=\\\"text\\\" formControlName=\\\"start_time\\\"></ion-input>\\n      </ion-item>\\n      <div *ngFor=\\\"let error of errorMessages.start_time\\\">\\n        <ng-container *ngIf=\\\"start_time.hasError(error.type) && (start_time.dirty || start_time.touched)\\\">\\n          <small class=\\\"error-message\\\">{{error.message}}</small>\\n        </ng-container>\\n      </div>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">End Time</ion-label>\\n        <ion-input inputmode=\\\"text\\\" formControlName=\\\"end_time\\\"></ion-input>\\n      </ion-item>\\n      <div *ngFor=\\\"let error of errorMessages.end_time\\\">\\n        <ng-container *ngIf=\\\"end_time.hasError(error.type) && (end_time.dirty || end_time.touched)\\\">\\n          <small class=\\\"error-message\\\">{{error.message}}</small>\\n        </ng-container>\\n      </div>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Intensity(1-5)</ion-label>\\n        <ion-input autocapitalize inputmode=\\\"text\\\" formControlName=\\\"intensity\\\"></ion-input>\\n      </ion-item>\\n      <div *ngFor=\\\"let error of errorMessages.intensity\\\">\\n        <ng-container *ngIf=\\\"intensity.hasError(error.type) && (intensity.dirty || intensity.touched)\\\">\\n          <small class=\\\"error-message\\\">{{error.message}}</small>\\n        </ng-container>\\n      </div>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Calories burned</ion-label>\\n        <ion-input formControlName=\\\"calories_b\\\"></ion-input>\\n      </ion-item>\\n      <div *ngFor=\\\"let error of errorMessages.calories_b\\\">\\n        <ng-container *ngIf=\\\"calories_b.hasError(error.type) && (calories_b.dirty || calories_b.touched)\\\">\\n          <small class=\\\"error-message\\\">{{error.message}}</small>\\n        </ng-container>\\n      </div>\\n    </ion-list>\\n    <ion-button [disabled]=\\\"!activityForm.valid\\\" (click)=\\\"SaveActivity()\\\" type=\\\"submit\\\" expand=\\\"block\\\">Submit <ion-icon slot=\\\"end\\\"\\n        name=\\\"create\\\">\\n      </ion-icon>\\n    </ion-button>\\n  </form>\\n</ion-content>\";"]}